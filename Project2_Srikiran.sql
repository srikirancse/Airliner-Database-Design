--References:
--	Referred to CodePlex’s Visio Forward Engineer Addin/tool to generate the script that only creates all tables 
--			according to my design in VISIO
--	The script generated was later cleaned up to adhere to the coding standards, and also 
--			added identities and some constraints which were not generated by the tool.
--	URL:  https://forwardengineer.codeplex.com/  


--Design Changes:
--	1.	Used my Database design which I have submitted in project 1.
--	2.	Broken down scheduled and actual arrival and departure times into another table ‘FlightTimes’ as per your comment
--	3.	Cleaned a white space in one column name as per your comment
--	4.	Added extra null able column ‘CancellationDateTime’ in CustomerTransaction table to track cancellation times.

--Schema Creation

CREATE SCHEMA pr2;

--CREATE TABLE Sctript starts

USE [ssistlaDataBase]
GO

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[FlightRoutes]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[FlightRoutes] 

GO 

CREATE TABLE [pr2].[FlightRoutes] 
  ( 
     [FlightRouteId] INTEGER        NOT NULL	IDENTITY(1,1), 
     [FromAirportId] INTEGER        NOT NULL, 
     [ToAirportId]   INTEGER        NOT NULL,	CHECK( [FromAirportId] <> [ToAirportId] ),
     [FlightLength]  DECIMAL(10, 2) NOT NULL	CHECK([FlightLength] > 0)
  ) 

GO 

ALTER TABLE [pr2].[FlightRoutes] 
  ADD CONSTRAINT [FlightRoutes_PK] PRIMARY KEY CLUSTERED ( [FlightRouteId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[ScheduleDetails]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[ScheduleDetails] 

GO 

CREATE TABLE [pr2].[ScheduleDetails] 
  ( 
     [FlightId]					INTEGER         NOT NULL	IDENTITY(1,1), 
     [FlightNumber]				VARCHAR(10)		NOT NULL, 
     [FlightRouteId]			INTEGER         NOT NULL, 
     [AirplaneId]				INTEGER         NOT NULL, 
     [ScheduledDepartureGate]	INTEGER         NOT NULL, 
     [ActualDepartureGate]		INTEGER         NULL, 
     [ScheduledArrivalGate]		INTEGER         NOT NULL, 
     [ActualArrivalGate]		INTEGER         NULL, 
     [FlightStatusId]			INTEGER         NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[ScheduleDetails] 
  ADD CONSTRAINT [ScheduleDetails_PK] PRIMARY KEY CLUSTERED ( [FlightId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Employees]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Employees] 

GO 

CREATE TABLE [pr2].[Employees] 
  ( 
     [EmployeeId]	INTEGER			NOT	NULL	IDENTITY(1,1), 
     [FirstName]	VARCHAR(25)		NOT NULL, 
     [MiddleName]	VARCHAR(25)		NULL, 
     [LastName]		VARCHAR(25)		NOT NULL, 
     [SSN]			CHAR(11)		NULL		CHECK( SSN LIKE '[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]' ),
     [Pay]			DECIMAL(15, 2)	NOT NULL    CHECK( Pay >= 0)
  ) 

GO 

ALTER TABLE [pr2].[Employees] 
  ADD CONSTRAINT [Employees_PK] PRIMARY KEY CLUSTERED ( [EmployeeId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[AirplaneModel]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[AirplaneModel] 

GO 

CREATE TABLE [pr2].[AirplaneModel] 
  ( 
     [ModelId]					INTEGER			NOT NULL	IDENTITY(1,1), 
     [ModelNumber]				VARCHAR(25)		NOT NULL, 
     [PilotsCount]				INTEGER			NOT NULL	CHECK( [PilotsCount] >= 0 ),
     [FightAttandantsCount]		INTEGER			NOT NULL	CHECK( [FightAttandantsCount] >= 0 ),
     [FlightRange]				DECIMAL(15, 2)	NOT NULL	CHECK( [FlightRange] >= 0 ),
     [PropulsionId]				INTEGER			NOT NULL, 
     [ManufacturerId]			INTEGER			NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[AirplaneModel] 
  ADD CONSTRAINT [AirplaneModel_PK] PRIMARY KEY CLUSTERED ( [ModelId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[ClassFares]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[ClassFares] 

GO 

CREATE TABLE [pr2].[ClassFares] 
  ( 
     [FareId]   INTEGER			NOT NULL	IDENTITY(1,1), 
     [Fare]     DECIMAL(15, 2)	NOT NULL	CHECK( [Fare] >= 0 ),
     [ClassId]  INTEGER			NOT NULL, 
     [FlightId] INTEGER			NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[ClassFares] 
  ADD CONSTRAINT [ClassFares_PK] PRIMARY KEY CLUSTERED ( [FareId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[CustomerTransaction]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[CustomerTransaction] 

GO 

CREATE TABLE [pr2].[CustomerTransaction] 
  ( 
     [TransactionId]			INTEGER		NOT NULL	IDENTITY(1,1), 
     [BookingDate]				DATETIME	NOT NULL, 
     [CustomerId]				INTEGER		NOT NULL, 
     [TicketStatusId]			INTEGER		NOT NULL, 
	 [CancellationDateTime]		DATETIME
  ) 

GO 

ALTER TABLE [pr2].[CustomerTransaction] 
  ADD CONSTRAINT [CustomerTransaction_PK] PRIMARY KEY CLUSTERED ( 
  [TransactionId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[FlightTimes]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[FlightTimes] 

GO 

CREATE TABLE [pr2].[FlightTimes] 
  ( 
     [FlightId]					INTEGER		NOT NULL, 
     [ScheduledDepartureTime]	DATETIME	NOT NULL, 
     [ProjectedDepartureTime]	DATETIME	NULL, 
     [ActualDepartureTime]		DATETIME	NULL, 
     [ScheduledArrivalTime]		DATETIME	NOT NULL,
     [ProjectedArrivalTime]		DATETIME	NULL, 
     [ActualArrivalTime]		DATETIME	NULL 
  ) 

GO 

ALTER TABLE [pr2].[FlightTimes] 
  ADD CONSTRAINT [FlightTimes_PK] PRIMARY KEY CLUSTERED ( [FlightId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Airplanes]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Airplanes] 

GO 

CREATE TABLE [pr2].[Airplanes] 
  ( 
     [AirplaneId]			INTEGER				NOT NULL	IDENTITY(1,1), 
     [DateBuilt]			DATE				NOT NULL, 
     [FlightHours]			DECIMAL(10, 2)		NOT NULL	CHECK( [FlightHours] >= 0),
     [AvailabilityId]		INTEGER				NOT NULL, 
     [FlightLocationId]		INTEGER				NULL, 
     [ModelId]				INTEGER				NULL 
  )	

GO 

ALTER TABLE [pr2].[Airplanes] 
  ADD CONSTRAINT [Airplanes_PK] PRIMARY KEY CLUSTERED ( [AirplaneId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Airports]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Airports] 

GO 

CREATE TABLE [pr2].[Airports] 
  ( 
     [AirportId]		INTEGER			NOT NULL	IDENTITY(1,1), 
     [Name]				VARCHAR(25)		NOT NULL, 
     [HangarCapacity]	INTEGER			NOT NULL	CHECK( [HangarCapacity] >= 0 )
  ) 

GO 

ALTER TABLE [pr2].[Airports] 
  ADD CONSTRAINT [Airports_PK] PRIMARY KEY CLUSTERED ( [AirportId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[AirportFees]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[AirportFees] 

GO 

CREATE TABLE [pr2].[AirportFees] 
  ( 
     [AirportFeesId]	INTEGER			NOT NULL	IDENTITY(1,1), 
     [AirportId]		INTEGER			NOT NULL, 
     [AirportFees]		DECIMAL(10, 2)	NOT NULL	CHECK( [AirportFees] >= 0),
     [AirportTax]		DECIMAL(10, 2)	NULL		CHECK( [AirportTax] >= 0), 
     [StateTax]			DECIMAL(10, 2)	NULL		CHECK( [StateTax] >= 0), 		 
     [CityTax]			DECIMAL(10, 2)	NULL		CHECK( [CityTax] >=0 ) 
  ) 

GO 

ALTER TABLE [pr2].[AirportFees] 
  ADD CONSTRAINT [AirportFees_PK] PRIMARY KEY CLUSTERED ( [AirportFeesId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Terminals]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Terminals] 

GO 

CREATE TABLE [pr2].[Terminals] 
  ( 
     [TerminalId]		INTEGER			NOT NULL	IDENTITY(1,1), 
     [TerminalName]		VARCHAR(25)		NOT NULL, 
     [AirportId]		INTEGER			NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[Terminals] 
  ADD CONSTRAINT [Terminals_PK] PRIMARY KEY CLUSTERED ( [TerminalId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Address]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Address] 

GO 

CREATE TABLE [pr2].[Address] 
  ( 
     [AirportId]	INTEGER		NOT NULL, 
     [Zip]			INTEGER		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[Address] 
  ADD CONSTRAINT [Address_PK] PRIMARY KEY CLUSTERED ( [AirportId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[TransactionDetails]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[TransactionDetails] 

GO 

CREATE TABLE [pr2].[TransactionDetails] 
  ( 
     [TransactionId]		INTEGER				NOT NULL, 
     [FlightId]				INTEGER				NOT NULL, 
     [TaxPaid]				DECIMAL(15, 2)		NOT NULL	CHECK( [TaxPaid] >=0 ), 
     [FeesPaid]				DECIMAL(15, 2)		NOT NULL	CHECK( [FeesPaid] >=0 ), 
     [ActualFlightPrice]	DECIMAL(15, 2)		NOT NULL	CHECK( [ActualFlightPrice] >=0 ), 
     [FlyerMilesUsed]		DECIMAL(15, 2)		NULL		CHECK( [FlyerMilesUsed] >=0 ), 
     [CheckInExtraCharges]	DECIMAL(15, 2)		NULL		CHECK( [CheckInExtraCharges] >=0 ), 
     [DiscountAmount]		DECIMAL(15, 2)		NULL		CHECK( [DiscountAmount] >=0 ), 
     [DiscountReason]		VARCHAR(50)			NULL, 
     [CheckInTimeDate]		DATETIME			NULL 
  ) 

GO 

ALTER TABLE [pr2].[TransactionDetails] 
  ADD CONSTRAINT [TransactionDetails_PK] PRIMARY KEY CLUSTERED ( [TransactionId] , [FlightId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[MaintenenceStatus]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[MaintenenceStatus] 

GO 

CREATE TABLE [pr2].[MaintenenceStatus] 
  ( 
     [Id]					INTEGER			NOT NULL	IDENTITY(1,1), 
     [MaintenenceStatus]	VARCHAR(25)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[MaintenenceStatus] 
  ADD CONSTRAINT [MaintenenceStatus_PK] PRIMARY KEY CLUSTERED ( [Id] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[PropulsionMethods]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[PropulsionMethods] 

GO 

CREATE TABLE [pr2].[PropulsionMethods] 
  ( 
     [Id]					INTEGER			NOT NULL	IDENTITY(1,1), 
     [PropulsionMethod]		VARCHAR(30)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[PropulsionMethods] 
  ADD CONSTRAINT [PropulsionMethods_PK] PRIMARY KEY CLUSTERED ( [Id] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[CityAndState]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[CityAndState] 

GO 

CREATE TABLE [pr2].[CityAndState] 
  ( 
     [Zip]		INTEGER			NOT NULL, 
     [City]		VARCHAR(25)		NOT NULL, 
     [State]	INTEGER			NOT NULL 
  )

GO 

ALTER TABLE [pr2].[CityAndState] 
  ADD CONSTRAINT [CityAndState_PK] PRIMARY KEY CLUSTERED ( [Zip] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[EntertainmentMethods]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[EntertainmentMethods] 

GO 

CREATE TABLE [pr2].[EntertainmentMethods] 
  ( 
     [EntertainmentId]		INTEGER			NOT NULL	IDENTITY(1,1), 
     [EntertainmentName]	VARCHAR(25)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[EntertainmentMethods] 
  ADD CONSTRAINT [EntertainmentMethods_PK] PRIMARY KEY CLUSTERED ( 
  [EntertainmentId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[FlightEntertainment]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[FlightEntertainment] 

GO 

CREATE TABLE [pr2].[FlightEntertainment] 
  ( 
     [ModelId]			INTEGER		NOT NULL, 
     [EntertainmentId]	INTEGER		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[FlightEntertainment] 
  ADD CONSTRAINT [FlightEntertainment_PK] PRIMARY KEY CLUSTERED ( [ModelId], 
  [EntertainmentId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[State]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[State] 

GO 

CREATE TABLE [pr2].[State] 
  ( 
     [StateId]		INTEGER			NOT NULL	IDENTITY(1,1), 
     [StateName]	CHAR(2)			NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[State] 
  ADD CONSTRAINT [State_PK] PRIMARY KEY CLUSTERED ( [StateId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[FlightStatus]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[FlightStatus] 

GO 

CREATE TABLE [pr2].[FlightStatus] 
  ( 
     [FlightStatusId]	INTEGER			NOT NULL	IDENTITY(1,1), 
     [FlightStatus]		VARCHAR(20)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[FlightStatus] 
  ADD CONSTRAINT [FlightStatus_PK] PRIMARY KEY CLUSTERED ( [FlightStatusId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Manufacturer]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Manufacturer] 

GO 

CREATE TABLE [pr2].[Manufacturer] 
  ( 
     [ManufacturerId]		INTEGER			NOT NULL	IDENTITY(1,1), 
     [ManufacturerName]		VARCHAR(25)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[Manufacturer] 
  ADD CONSTRAINT [Manufacturer_PK] PRIMARY KEY CLUSTERED ( [ManufacturerId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[TerminalGates]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[TerminalGates] 

GO 

CREATE TABLE [pr2].[TerminalGates] 
  ( 
     [GateId]		INTEGER		NOT NULL	IDENTITY(1,1), 
     [TerminalId]	INTEGER		NOT NULL, 
     [IsGateFree]	BIT			NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[TerminalGates] 
  ADD CONSTRAINT [TerminalGates_PK] PRIMARY KEY CLUSTERED ( [GateId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[FlightsHandled]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[FlightsHandled] 

GO 

CREATE TABLE [pr2].[FlightsHandled] 
  ( 
     [AirportId] INTEGER NOT NULL, 
     [ModelId]   INTEGER NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[FlightsHandled] 
  ADD CONSTRAINT [FlightsHandled_PK] PRIMARY KEY CLUSTERED ( [AirportId], 
  [ModelId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[ClassAndSeatMap]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[ClassAndSeatMap] 

GO 

CREATE TABLE [pr2].[ClassAndSeatMap] 
  ( 
     [SeatId]			INTEGER		NOT NULL	IDENTITY(1,1), 
     [ClassId]			INTEGER		NOT NULL, 
     [SeatNumber]		INTEGER		NOT NULL	CHECK( [SeatNumber] >= 0),
     [RowNumber]		INTEGER		NOT NULL	CHECK( [RowNumber] >= 0), 
     [AirplaneId]		INTEGER		NOT NULL, 
     [FlightId]			INTEGER		NULL, 
     [TransactionId]	INTEGER		NULL 
  ) 

GO 

ALTER TABLE [pr2].[ClassAndSeatMap] 
  ADD CONSTRAINT [ClassAndSeatMap_PK] PRIMARY KEY CLUSTERED ( [SeatId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Availability]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Availability] 

GO 

CREATE TABLE [pr2].[Availability] 
  ( 
     [AvailabilityId]	INTEGER			NOT NULL	IDENTITY(1,1), 
     [Availability]		VARCHAR(25)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[Availability] 
  ADD CONSTRAINT [Availability_PK] PRIMARY KEY CLUSTERED ( [AvailabilityId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[FlightsParked]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[FlightsParked] 

GO 

CREATE TABLE [pr2].[FlightsParked] 
  ( 
     [ParkingId]		INTEGER		NOT NULL	IDENTITY(1,1), 
     [PurposeOfStay]	INTEGER		NOT NULL, 
     [AirportId]		INTEGER		NOT NULL, 
     [TimeOfArrival]	DATETIME	NULL, 
     [TimeOfDeparture]	DATETIME	NULL,		
	 
	 CHECK(	(DAY( [TimeOfDeparture] ) >= DAY([TimeOfArrival]))
		AND (MONTH( [TimeOfDeparture] ) >= MONTH([TimeOfArrival]))
		AND (YEAR( [TimeOfDeparture] ) >= YEAR([TimeOfArrival])) )	
  ) 

GO 

ALTER TABLE [pr2].[FlightsParked] 
  ADD CONSTRAINT [FlightsParked_PK] PRIMARY KEY CLUSTERED ( [ParkingId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[AirplaneClasses]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[AirplaneClasses] 

GO 

CREATE TABLE [pr2].[AirplaneClasses] 
  ( 
     [ClassId]		INTEGER			NOT NULL	IDENTITY(1,1), 
     [ClassName]	VARCHAR(30)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[AirplaneClasses] 
  ADD CONSTRAINT [AirplaneClasses_PK] PRIMARY KEY CLUSTERED ( [ClassId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[TicketStatus]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[TicketStatus] 

GO 

CREATE TABLE [pr2].[TicketStatus] 
  ( 
     [Id]				INTEGER			NOT NULL	IDENTITY(1,1), 
     [TicketStatus]		VARCHAR(25)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[TicketStatus] 
  ADD CONSTRAINT [TicketStatus_PK] PRIMARY KEY CLUSTERED ( [Id] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[RunWays]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[RunWays] 

GO 

CREATE TABLE [pr2].[RunWays] 
  ( 
     [RunWayId]			INTEGER			NOT NULL	IDENTITY(1,1), 
     [RunWayLength]		DECIMAL(10, 2)	NOT NULL	CHECK( [RunWayLength] >= 0), 
     [AirportId]		INTEGER			NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[RunWays] 
  ADD CONSTRAINT [RunWays_PK] PRIMARY KEY CLUSTERED ( [RunWayId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Maintenence]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Maintenence] 

GO 

CREATE TABLE [pr2].[Maintenence] 
  ( 
     [MaintenenceId]		INTEGER			NOT NULL	IDENTITY(1,1), 
     [WorkDescription]		VARCHAR(50)		NOT NULL, 
     [DueDate]				DATE			NOT NULL, 
     [EmployeeId]			INTEGER			NOT NULL, 
     [AirplaneId]			INTEGER			NOT NULL, 
     [MaintenenceStatusId]	INTEGER			NOT NULL, 
     [FinishDate]			DATE			NULL	
  )

GO 

ALTER TABLE [pr2].[Maintenence] 
  ADD CONSTRAINT [Maintenence_PK] PRIMARY KEY CLUSTERED ( [MaintenenceId] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[PurposeOfStay]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[PurposeOfStay] 

GO 

CREATE TABLE [pr2].[PurposeOfStay] 
  ( 
     [Id]		INTEGER			NOT NULL	IDENTITY(1,1), 
     [Purpose]	VARCHAR(25)		NOT NULL 
  ) 

GO 

ALTER TABLE [pr2].[PurposeOfStay] 
  ADD CONSTRAINT [PurposeOfStay_PK] PRIMARY KEY CLUSTERED ( [Id] ) 

GO 

GO 

IF EXISTS (SELECT * 
			FROM   sys.objects 
			WHERE  object_id = Object_id(N'[pr2].[Customers]') 
					AND type IN ( N'U' )) 
  DROP TABLE [pr2].[Customers] 

GO 

CREATE TABLE [pr2].[Customers] 
  ( 
     [CustomerId]			INTEGER			NOT	NULL	IDENTITY(1,1), 
     [FirstName]			VARCHAR(25)		NOT NULL, 
     [MiddleName]			VARCHAR(25)		NULL, 
     [LastName]				VARCHAR(25)		NOT NULL, 
     [DateOfBirth]			DATE			NOT NULL, 
     [FrequentFlyerNumber]	DECIMAL(15, 2)	NULL		CHECK([FrequentFlyerNumber] >= 0)
  ) 

GO 

ALTER TABLE [pr2].[Customers] 
  ADD CONSTRAINT [Customers_PK] PRIMARY KEY CLUSTERED ( [CustomerId] ) 

GO 

GO 

ALTER TABLE [pr2].[FlightRoutes] 
  WITH CHECK ADD CONSTRAINT [Airports_FlightRoutes_FK1] 
  FOREIGN KEY ( [FromAirportId] ) REFERENCES [pr2].[Airports] ( [AirportId] ) 

ALTER TABLE [pr2].[FlightRoutes] 
  WITH CHECK ADD CONSTRAINT [Airports_FlightRoutes_FK2] 
  FOREIGN KEY ( [ToAirportId] ) REFERENCES [pr2].[Airports] ( [AirportId] ) 

GO 

ALTER TABLE [pr2].[ScheduleDetails] 
  WITH CHECK ADD CONSTRAINT [FlightRoutes_ScheduleDetails_FK1] 
  FOREIGN KEY ( [FlightRouteId] ) REFERENCES [pr2].[FlightRoutes] ( [FlightRouteId] ) 

ALTER TABLE [pr2].[ScheduleDetails] 
  WITH CHECK ADD CONSTRAINT [Airplanes_ScheduleDetails_FK1] 
  FOREIGN KEY ( [AirplaneId] ) REFERENCES [pr2].[Airplanes] ( [AirplaneId] ) 

ALTER TABLE [pr2].[ScheduleDetails] 
  WITH CHECK ADD CONSTRAINT [TerminalGates_ScheduleDetails_FK4] 
  FOREIGN KEY ( [ScheduledArrivalGate] ) REFERENCES [pr2].[TerminalGates] ( [GateId] ) 

ALTER TABLE [pr2].[ScheduleDetails] 
  WITH CHECK ADD CONSTRAINT [TerminalGates_ScheduleDetails_FK3] 
  FOREIGN KEY ( [ActualArrivalGate] ) REFERENCES [pr2].[TerminalGates] ( [GateId] ) 

ALTER TABLE [pr2].[ScheduleDetails] 
  WITH CHECK ADD CONSTRAINT [TerminalGates_ScheduleDetails_FK2] 
  FOREIGN KEY ( [ActualDepartureGate] ) REFERENCES [pr2].[TerminalGates] ( [GateId] ) 

ALTER TABLE [pr2].[ScheduleDetails] 
  WITH CHECK ADD CONSTRAINT [TerminalGates_ScheduleDetails_FK1] 
  FOREIGN KEY ( [ScheduledDepartureGate] ) REFERENCES [pr2].[TerminalGates] ( [GateId] ) 

ALTER TABLE [pr2].[ScheduleDetails] 
  WITH CHECK ADD CONSTRAINT [FlightStatus_ScheduleDetails_FK1] 
  FOREIGN KEY ( [FlightStatusId] ) REFERENCES [pr2].[FlightStatus] ( [FlightStatusId] ) 

GO 

GO 

ALTER TABLE [pr2].[AirplaneModel] 
  WITH CHECK ADD CONSTRAINT [PropulsionMethods_AirplaneModel_FK1] 
  FOREIGN KEY ( [PropulsionId] ) REFERENCES [pr2].[PropulsionMethods] ( [Id] ) 

ALTER TABLE [pr2].[AirplaneModel] 
  WITH CHECK ADD CONSTRAINT [Manufacturer_AirplaneModel_FK1] 
  FOREIGN KEY ( [ManufacturerId] ) REFERENCES [pr2].[Manufacturer] ( [ManufacturerId] ) 

GO 

ALTER TABLE [pr2].[ClassFares] 
  WITH CHECK ADD CONSTRAINT [AirplaneClasses_ClassFares_FK1] 
  FOREIGN KEY ( [ClassId] ) REFERENCES [pr2].[AirplaneClasses] ( [ClassId] ) 

ALTER TABLE [pr2].[ClassFares] 
  WITH CHECK ADD CONSTRAINT [ScheduleDetails_ClassFares_FK1] 
  FOREIGN KEY ( [FlightId] ) REFERENCES [pr2].[ScheduleDetails] ( [FlightId] ) 

GO 

ALTER TABLE [pr2].[CustomerTransaction] 
  WITH CHECK ADD CONSTRAINT [Customers_CustomerTransaction_FK1] 
  FOREIGN KEY ( [CustomerId] ) REFERENCES [pr2].[Customers] ( [CustomerId] ) 

ALTER TABLE [pr2].[CustomerTransaction] 
  WITH CHECK ADD CONSTRAINT [TicketStatus_CustomerTransaction_FK1] 
  FOREIGN KEY ( [TicketStatusId] ) REFERENCES [pr2].[TicketStatus] ( [Id] ) 

GO 

ALTER TABLE [pr2].[FlightTimes] 
  WITH CHECK ADD CONSTRAINT [ScheduleDetails_FlightTimes_FK1] 
  FOREIGN KEY ( [FlightId] ) REFERENCES [pr2].[ScheduleDetails] ( [FlightId] ) 

GO 

ALTER TABLE [pr2].[Airplanes] 
  WITH CHECK ADD CONSTRAINT [AirplaneModel_Airplanes_FK1] 
  FOREIGN KEY ( [ModelId] ) REFERENCES [pr2].[AirplaneModel] ( [ModelId] ) 

ALTER TABLE [pr2].[Airplanes] 
  WITH CHECK ADD CONSTRAINT [FlightsParked_Airplanes_FK1] 
  FOREIGN KEY ( [FlightLocationId] ) REFERENCES [pr2].[FlightsParked] ( [ParkingId] ) 

ALTER TABLE [pr2].[Airplanes] 
  WITH CHECK ADD CONSTRAINT [Availability_Airplanes_FK1] 
  FOREIGN KEY ( [AvailabilityId] ) REFERENCES [pr2].[Availability] ( [AvailabilityId] ) 

GO 

GO 

ALTER TABLE [pr2].[AirportFees] 
  WITH CHECK ADD CONSTRAINT [Airports_AirportFees_FK1] 
  FOREIGN KEY ( [AirportId] ) REFERENCES [pr2].[Airports] ( [AirportId] ) 

GO 

ALTER TABLE [pr2].[Terminals] 
  WITH CHECK ADD CONSTRAINT [Airports_Terminals_FK1] 
  FOREIGN KEY ( [AirportId] ) REFERENCES [pr2].[Airports] ( [AirportId] ) 

GO 

ALTER TABLE [pr2].[Address] 
  WITH CHECK ADD CONSTRAINT [Airports_Address_FK1] 
  FOREIGN KEY ( [AirportId] ) REFERENCES [pr2].[Airports] ( [AirportId] ) 

ALTER TABLE [pr2].[Address] 
  WITH CHECK ADD CONSTRAINT [CityAndState_Address_FK1] 
  FOREIGN KEY ( [Zip] ) REFERENCES [pr2].[CityAndState] ( [Zip] ) 

GO 

ALTER TABLE [pr2].[TransactionDetails] 
  WITH CHECK ADD CONSTRAINT [CustomerTransaction_TransactionDetails_FK1] 
  FOREIGN KEY ( [TransactionId] ) REFERENCES [pr2].[CustomerTransaction] ( [TransactionId] ) 

ALTER TABLE [pr2].[TransactionDetails] 
  WITH CHECK ADD CONSTRAINT [ScheduleDetails_TransactionDetails_FK1] 
  FOREIGN KEY ( [FlightId] ) REFERENCES [pr2].[ScheduleDetails] ( [FlightId] ) 

GO 

GO 

GO 

ALTER TABLE [pr2].[CityAndState] 
  WITH CHECK ADD CONSTRAINT [State_CityAndState_FK1] 
  FOREIGN KEY ( [State] ) REFERENCES [pr2].[State] ( [StateId] ) 

GO 

GO 

ALTER TABLE [pr2].[FlightEntertainment] 
  WITH CHECK ADD CONSTRAINT [EntertainmentMethods_FlightEntertainment_FK1] 
  FOREIGN KEY ( [EntertainmentId] ) REFERENCES [pr2].[EntertainmentMethods] ( 
  [EntertainmentId] ) 

ALTER TABLE [pr2].[FlightEntertainment] 
  WITH CHECK ADD CONSTRAINT [AirplaneModel_FlightEntertainment_FK1] FOREIGN KEY 
  ( [ModelId] ) REFERENCES [pr2].[AirplaneModel] ( [ModelId] ) 

GO 

GO 

GO 

GO 

ALTER TABLE [pr2].[TerminalGates] 
  WITH CHECK ADD CONSTRAINT [Terminals_TerminalGates_FK1] 
  FOREIGN KEY ( [TerminalId] ) REFERENCES [pr2].[Terminals] ( [TerminalId] ) 

GO 

ALTER TABLE [pr2].[FlightsHandled] 
  WITH CHECK ADD CONSTRAINT [AirplaneModel_FlightsHandled_FK1] 
  FOREIGN KEY ( [ModelId] ) REFERENCES [pr2].[AirplaneModel] ( [ModelId] ) 

ALTER TABLE [pr2].[FlightsHandled] 
  WITH CHECK ADD CONSTRAINT [Airports_FlightsHandled_FK1] 
  FOREIGN KEY ( [AirportId] ) REFERENCES [pr2].[Airports] ( [AirportId] ) 

GO 

ALTER TABLE [pr2].[ClassAndSeatMap] 
  WITH CHECK ADD CONSTRAINT [ScheduleDetails_ClassAndSeatMap_FK1] 
  FOREIGN KEY ( [FlightId] ) REFERENCES [pr2].[ScheduleDetails] ( [FlightId] ) 

ALTER TABLE [pr2].[ClassAndSeatMap] 
  WITH CHECK ADD CONSTRAINT [CustomerTransaction_ClassAndSeatMap_FK1] 
  FOREIGN KEY ( [TransactionId] ) REFERENCES [pr2].[CustomerTransaction] ( [TransactionId] ) 

ALTER TABLE [pr2].[ClassAndSeatMap] 
  WITH CHECK ADD CONSTRAINT [Airplanes_ClassAndSeatMap_FK1] 
  FOREIGN KEY ( [AirplaneId] ) REFERENCES [pr2].[Airplanes] ( [AirplaneId] ) 

ALTER TABLE [pr2].[ClassAndSeatMap] 
  WITH CHECK ADD CONSTRAINT [AirplaneClasses_ClassAndSeatMap_FK1] 
  FOREIGN KEY ( [ClassId] ) REFERENCES [pr2].[AirplaneClasses] ( [ClassId] ) 

GO 

GO 

ALTER TABLE [pr2].[FlightsParked] 
  WITH CHECK ADD CONSTRAINT [PurposeOfStay_FlightsParked_FK1] 
  FOREIGN KEY ( [PurposeOfStay] ) REFERENCES [pr2].[PurposeOfStay] ( [Id] ) 

ALTER TABLE [pr2].[FlightsParked] 
  WITH CHECK ADD CONSTRAINT [Airports_FlightsParked_FK1] 
  FOREIGN KEY ( [AirportId] ) REFERENCES [pr2].[Airports] ( [AirportId] ) 

GO 

GO 

GO 

ALTER TABLE [pr2].[RunWays] 
  WITH CHECK ADD CONSTRAINT [Airports_RunWays_FK1] 
  FOREIGN KEY ( [AirportId] ) REFERENCES [pr2].[Airports] ( [AirportId] ) 

GO 

ALTER TABLE [pr2].[Maintenence] 
  WITH CHECK ADD CONSTRAINT [Airplanes_Maintenence_FK1] 
  FOREIGN KEY ( [AirplaneId] ) REFERENCES [pr2].[Airplanes] ( [AirplaneId] ) 

ALTER TABLE [pr2].[Maintenence] 
  WITH CHECK ADD CONSTRAINT [MaintenenceStatus_Maintenence_FK1] 
  FOREIGN KEY ( [MaintenenceStatusId] ) REFERENCES [pr2].[MaintenenceStatus] ( [Id] ) 

ALTER TABLE [pr2].[Maintenence] 
  WITH CHECK ADD CONSTRAINT [Employees_Maintenence_FK1] 
  FOREIGN KEY ( [EmployeeId] ) REFERENCES [pr2].[Employees] ( [EmployeeId] ) 

GO 

GO 

GO 


-- DATA INSERTION Script starts

USE [ssistlaDataBase]
GO

INSERT INTO [pr2].[FlightRoutes]
           ([FromAirportId], [ToAirportId], [FlightLength])
     VALUES
           (1,	2,	20.4),
		   (1,	3,	24.4),
		   (2,	3,	25.4),
		   (3,	4,	26.4),
		   (4,	5,	29.4),
		   (5,	6,	28.4)
GO


INSERT INTO [pr2].[ScheduleDetails]
           (	[FlightNumber]
				,[FlightRouteId]
				,[AirplaneId]
				,[ScheduledDepartureGate]
				,[ActualDepartureGate]
				,[ScheduledArrivalGate]
				,[ActualArrivalGate]
				,[FlightStatusId]
			)
     VALUES
           (	'AA300'
				,2
				,4
				,4
				,1
				,2
				,2
				,5
			),
			(	'AA400'
				,3
				,4
				,5
				,3
				,2
				,2
				,4
			),
			(	'AA500'
				,4
				,4
				,6
				,3
				,5
				,2
				,6
			),
			(	'AA600'
				,5
				,5
				,5
				,3
				,4
				,2
				,6
			),
			(	'AA700'
				,6
				,6
				,5
				,3
				,4
				,2
				,6
			),
			(	'AA100'
				,7
				,7
				,4
				,3
				,4
				,2
				,5
			)
GO

INSERT INTO [pr2].[Employees]
           ([FirstName], [MiddleName], [LastName], [SSN], [Pay])
     VALUES
           ('John',		NULL,	'Walker',	'123-45-7989',	150 ),
		   ('Andrew',	NULL,	'Ponting',	'123-43-7989',	170 ),
		   ('Mike',		NULL,	'Walker',	'127-43-7989',	170 ),
		   ('Stephen',	NULL,	'Paul',		'122-43-7989',	170 ),
		   ('Riaz',		NULL,	'Paul',		'128-43-7989',	170 ),
		   ('Matt',		NULL,	'Goerge',	'138-43-7989',	170 )
GO

INSERT INTO [pr2].[AirplaneModel]
           ([ModelNumber], [PilotsCount], [FightAttandantsCount], [FlightRange], [PropulsionId] ,[ManufacturerId])
     VALUES
           ('747',  4, 10, 100.56, 1, 1),
		   ('737',  4, 8,  90.67,  1, 1),
		   ('767',  3, 7,  85.45,  2, 1),
		   ('A300', 4, 10, 105.67, 1, 2),
		   ('A310', 3, 8,  96.45,  2, 2),
		   ('A318', 4, 7,  95.87,  2, 2)
GO


INSERT INTO [pr2].[ClassFares]
           ([Fare], [ClassId], [FlightId])
     VALUES
           (600,  1,15),
		   (900,  2,15),
		   (1200, 3,15),
		   (700,  1,16),
		   (950,  2,16),
		   (1300, 3,17)
GO


INSERT INTO [pr2].[CustomerTransaction]
           ([BookingDate], [CustomerId], [TicketStatusId])
     VALUES
           ('2016-01-24 10:30 PM', 1, 1),
		   ('2016-01-14 11:30 PM', 2, 1),
		   ('2016-02-14 10:30 AM', 3, 1),
		   ('2016-03-14 09:30 AM', 4, 1),
		   ('2016-04-14 09:30 PM', 5, 2),
		   ('2016-05-14 07:30 PM', 6, 2),
		   ('2016-06-14 08:30 PM', 6, 1)
GO


INSERT INTO [pr2].[FlightTimes]
           (	[FlightId]
				,[ScheduledDepartureTime]
				,[ProjectedDepartureTime]
				,[ActualDepartureTime]
				,[ScheduledArrivalTime]
				,[ProjectedArrivalTime]
				,[ActualArrivalTime]
			)
     VALUES
           (	15
				,'2016-03-25 11:00 AM'
				,'2016-03-25 01:00 PM'
				,'2016-03-25 01:30 PM'
				,'2016-03-26 11:00 AM'
				,'2016-03-26 11:30 AM'
				,'2016-03-26 11:30 AM'
			),
		   (	16
				,'2016-04-25 11:00 AM'
				,'2016-04-25 01:00 PM'
				,'2016-04-25 01:30 PM'
				,'2016-04-26 11:00 AM'
				,'2016-04-26 11:30 AM'
				,'2016-04-26 11:30 AM'
			),
		   (	17	
				,'2016-05-25 11:00 AM'
				,'2016-05-25 01:00 PM'
				,'2016-05-25 01:30 PM'
				,'2016-05-26 11:00 AM'
				,'2016-05-26 11:30 AM'
				,'2016-05-26 11:30 AM'
			),
		   (	18
				,'2016-06-25 11:00 AM'
				,'2016-06-25 01:00 PM'
				,'2016-06-25 01:30 PM'
				,'2016-06-26 11:00 AM'
				,'2016-06-26 11:30 AM'
				,'2016-06-26 11:30 AM'
			),
		   (	19, 
				'2016-01-22 11:00 AM'
				,'2016-01-23 01:00 PM'
				,'2016-01-23 01:30 PM'
				,'2016-01-22 11:00 AM'
				,'2016-01-23 11:30 AM'
				,'2016-01-23 11:30 AM'
			),
		   (	20
				,'2015-05-25 11:00 AM'
				,'2015-05-25 01:00 PM'
				,'2015-05-25 01:30 PM'
				,'2015-05-26 11:00 AM'
				,'2015-05-26 11:30 AM'
				,'2015-05-26 11:30 AM'
			)
GO


INSERT INTO [pr2].[Airplanes]
           ([DateBuilt], [FlightHours], [AvailabilityId], [FlightLocationId], [ModelId])
     VALUES
           ('2016-01-14', 145.34, 1, 1,		2),
		   ('2016-01-15', 168.34, 2, 2,		3),
		   ('2016-01-16', 156.34, 3, 3,		4),
		   ('2016-01-17', 135.34, 1, NULL,	5),
		   ('2016-01-18', 175.34, 2, NULL,	6),
		   ('2016-01-19', 144.34, 3, 4,		7)
GO

INSERT INTO [pr2].[Airports]
           ([Name], [HangarCapacity])
     VALUES
           ('Syracuse' , 10),
		   ('Chicago'  , 15),
		   ('New York' , 20),
		   ('Boston'   , 25),
		   ('Buffalo'  , 15),
		   ('Florida'  , 25)
GO

INSERT INTO [pr2].[AirportFees]
           ([AirportId], [AirportFees], [AirportTax], [StateTax], [CityTax])
     VALUES
           (1, 100, 10, 2,    1   ),
		   (2, 90 , 11, 3,    1   ),
		   (3, 80 , 10, 2,    NULL),
		   (4, 70 , 10, 2,	  NULL),
		   (5, 60 , 10, NULL, NULL),
		   (6, 75 , 11, NULL, NULL)
GO

INSERT INTO [pr2].[Terminals]
           ([TerminalName], [AirportId])
     VALUES
           ('T1',	1),
		   ('T2',	1),
		   ('T3',	1),
		   ('A1',	2),
		   ('A2',	2),
		   ('A3',	2)
GO


INSERT INTO [pr2].[Address] ([AirportId], [Zip])
	VALUES					(	1,        35801 ),
							(	2,        99501 ),
							(	3,        85001 ),
							(	4,        72201 ),
							(	5,        90001 ),
							(	6,        80120 ) 
GO


INSERT INTO [pr2].[TransactionDetails]
           (	[TransactionId],
				[FlightId],
				[TaxPaid],
				[FeesPaid],
				[ActualFlightPrice],
				[FlyerMilesUsed],
				[CheckInExtraCharges],
				[DiscountAmount],
				[DiscountReason],
				[CheckInTimeDate]
			)
     VALUES
           (	16
				,15
				,100.34
				,90.34
				,34.34
				,NULL
				,NULL
				,NULL
				,NULL
				,'2016-03-23 10:30 PM'
		   ),
		   (	16
				,16
				,80.34
				,70.34
				,24.34
				,NULL
				,NULL
				,NULL
				,NULL
				,'2016-03-24 08:30 PM'
		   ),
		   (	17
				,15
				,100.34
				,90.34
				,34.34
				,10
				,10.34
				,NULL
				,NULL
				,'2016-04-23 10:30 PM'
		   ),
		   (	18
				,16
				,90.34
				,60.34
				,54.34
				,NULL
				,NULL
				,10.23
				,'Christmas Offer'
				,'2016-03-23 09:30 PM'
		   ),
		   (	19
				,17
				,80.34
				,30.34
				,64.34
				,NULL
				,NULL
				,10.23
				,'Christmas Offer'
				,'2016-03-23 09:30 PM'
		   ),
		   (	19
				,19
				,50.34
				,30.34
				,24.34
				,NULL
				,NULL
				,10.23
				,'Christmas Offer'
				,'2016-03-24 09:30 PM'
		   )
GO

INSERT INTO [pr2].[MaintenenceStatus]
           ([MaintenenceStatus])
     VALUES
           ('In Progress'),
		   ('Completed'),
		   ('Yet to begin')
GO

INSERT INTO [pr2].[PropulsionMethods]
           ([PropulsionMethod])
     VALUES
           ('Engine'),
		   ('Propeller'),
		   ('Nozzle')
GO

INSERT INTO [pr2].[CityAndState]
           ([Zip], [City], [State])
     VALUES
           (35801, 'Huntsville'    , 1), 
		   (99501, 'Anchorage'     , 2),
		   (85001, 'Phoenix'	   , 3),
		   (72201, 'Little Rock'   , 4),
		   (90001, 'Los Angeles'   , 5),
		   (80120, 'Littleton'     , 6)
GO

INSERT INTO [pr2].[EntertainmentMethods]
           ([EntertainmentName])
     VALUES
           ('Movies'),
		   ('WIFI'),
		   ('Music'),
		   ('Magzines')
GO


INSERT INTO [pr2].[FlightEntertainment]
           ([ModelId], [EntertainmentId])
     VALUES
           (2,	1),
		   (2,	2),
		   (2,	3),
		   (3,	2),
		   (3,	3),
		   (4,	2),
		   (5,	1)
GO

INSERT INTO [pr2].[State]
           ([StateName])
     VALUES
           ('AL'),
		   ('AK'),
		   ('AZ'),
		   ('AR'),
		   ('CA'),
		   ('CO'),
		   ('CT'),
		   ('NY')
GO

INSERT INTO [pr2].[FlightStatus]
           ([FlightStatus])
     VALUES
           ('Scheduled - On Time'),
		   ('Scheduled - Delayed'),
		   ('In Progress - On Time'),
		   ('In Progress - Late'),
		   ('Completed')
GO

INSERT INTO [pr2].[Manufacturer]
           ([ManufacturerName])
     VALUES
           ('Boeing'),
		   ('Airbus')
GO

INSERT INTO [pr2].[TerminalGates]
           ([TerminalId], [IsGateFree], [GateNumber])
     VALUES
           (1, 0, 1),
		   (2, 1, 1),
		   (3, 1, 1),
		   (4, 0, 1),
		   (5, 1, 1),
		   (6, 0, 1)
GO


INSERT INTO [pr2].[FlightsHandled]
           ([AirportId], [ModelId])
     VALUES
           (1,	2),
		   (1,	3),
		   (1,	4),
		   (2,	5),
		   (2,	6),
		   (4,	7)
GO


INSERT INTO [pr2].[ClassAndSeatMap]
           ([ClassId], [SeatNumber], [RowNumber], [AirplaneId], [FlightId], [TransactionId])
     VALUES
           (1, 1, 1, 4, 15, 16),
		   (1, 2, 2, 4, 15, 17),
		   (2, 1, 1, 4, 15, 18),
		   (2, 2, 2, 5, 16, 19),
		   (3, 1, 1, 5, 16, 20),
		   (3, 2, 2, 5, 16, 21)
GO

INSERT INTO [pr2].[Availability]
           ([Availability])
     VALUES
           ('Available'				),
		   ('Retired'				),
		   ('Requires Maintenance'  )
GO

INSERT INTO [pr2].[FlightsParked]
           ([PurposeOfStay] ,[AirportId] ,[TimeOfArrival], [TimeOfDeparture])
     VALUES
           (1,	1,	'2016-03-28 10:30 PM', '2016-03-29 11:30 PM'),
		   (1,	2,	'2016-03-29 10:30 PM', '2016-03-30 11:30 PM'),
		   (2,	3,	'2016-03-29 11:30 PM', '2016-03-30 10:30 PM'),
		   (2,	4,	'2016-03-15 10:30 PM', '2016-03-16 11:30 PM'),
		   (1,	5,	'2016-03-16 10:30 PM', '2016-03-17 11:30 PM'),
		   (1,	6,	'2016-03-19 10:30 PM', '2016-03-20 11:30 PM')

GO

INSERT INTO [pr2].[AirplaneClasses]
           ([ClassName])
     VALUES
           ('Business'),
		   ('Executive'),
		   ('Economy')
GO

INSERT INTO [pr2].[TicketStatus]
           ([TicketStatus])
     VALUES
           ('Booked'),
		   ('Confirmed'),
		   ('Cancelled'),
		   ('CheckedIn'),
		   ('No Show')
GO

INSERT INTO [pr2].[RunWays]
           ([RunWayLength], [AirportId])
     VALUES
           (100.34,	1),
		   (120.34,	2),
		   (136.34,	3),
		   (125.32,	4),
		   (164.23, 5),
		   (163.24,	6)
GO



INSERT INTO [pr2].[Maintenence]
           (	[WorkDescription]
				,[DueDate]
				,[EmployeeId]
				,[AirplaneId]
				,[MaintenenceStatusId]
				,[FinishDate]
			)
     VALUES
           (	'Engine Replacement'
				,'2016-02-21'
				,1
				,4
				,1
				,NULL
			),
			(	'Throttle Adjustment'
				,'2016-03-21'
				,2
				,4
				,1
				,NULL
			),
			(	'Seats Replacement'
				,'2016-04-21'
				,3
				,5
				,2
				,'2016-04-21'
			),
			(	'Surface cleaning'
				,'2016-04-25'
				,4
				,7
				,2
				,'2016-04-21'
			),
			(	'Bolts Replacement'
				,'2016-04-26'
				,4
				,6
				,3
				,NULL
			),
			(	'TCASS Check'
				,'2016-04-26'
				,5
				,7
				,3
				,NULL
			)
GO

INSERT INTO [pr2].[PurposeOfStay]
           ([Purpose])
     VALUES
           ('Overnight'),
		   ('Awaiting Maintenence'),
		   ('Unscheduled')
GO


INSERT INTO [pr2].[Customers]
           ([FirstName], [MiddleName], [LastName], [DateOfBirth], [FrequentFlyerNumber])
     VALUES
           ('Srikiran'    , NULL     , 'Sistla' , '1992-04-01', 200),
		   ('Sandeep'     , 'Venkata', 'Maddali', '1989-04-01', 300),
		   ('Vamsi'       , 'Krishna', 'Kodali' , '1985-06-01', 400),
		   ('Karthikeya'  , NULL     , 'Bolla'  , '1993-07-01', 300),
		   ('Prem'        , NULL     , 'Martin' , '1990-08-01', 200),
		   ('Vinay'       , NULL     , 'Polati' , '1994-08-01', 300)
GO

--Views

--	1.	This view shows various details about all the flights which are parked now which may me useful to check 
--			if some flight is available for scheduling or some flight requires maintenence

CREATE VIEW pr2.PlanesOnLand (ManufacturerName, ModelNumber, [Availability], AirportName, PurposeOfStay) AS
	SELECT ManufacturerName, ModelNumber, [Availability], Name, Purpose
		FROM (SELECT ManufacturerName, ModelNumber, AvailabilityId, Name, Purpose
				FROM (SELECT  ManufacturerName, ModelNumber, AvailabilityId, AirportId, Purpose
						FROM (SELECT ManufacturerName, ModelNumber, AvailabilityId, AirportId, PurposeOfStay
								FROM (SELECT ManufacturerName, ModelNumber, FlightLocationId, AvailabilityId
										FROM (SELECT ManufacturerId, ModelNumber, FlightLocationId, AvailabilityId
												FROM pr2.Airplanes INNER JOIN pr2.AirplaneModel
													ON  Airplanes.ModelId = AirplaneModel.ModelId
												WHERE FlightLocationId IS NOT NULL) T1 INNER JOIN pr2.Manufacturer
											ON T1.ManufacturerId = Manufacturer.ManufacturerId) T2 INNER JOIN pr2.FlightsParked
									ON T2.FlightLocationId = pr2.FlightsParked.ParkingId) T3 INNER JOIN pr2.PurposeOfStay
							ON T3.PurposeOfStay = PurposeOfStay.Id) T4 INNER JOIN pr2.Airports
					ON	T4.AirportId = Airports.AirportId) T5 INNER JOIN pr2.[Availability]
			ON T5.AvailabilityId = [Availability].AvailabilityId;

--	2.	This view shows various maintenence details of all airplanes which are in maintenence


CREATE VIEW pr2.FlightMaintenence ( WorkDescription, MaintenenceStatus, Employee, AirplaneId, DueDate, AirportName ) AS
	SELECT WorkDescription, MaintenenceStatus, Employee, AirplaneId, DueDate, Name
		FROM(SELECT WorkDescription, MaintenenceStatus, Employee, AirplaneId, DueDate, AirportId 
				FROM (SELECT WorkDescription, MaintenenceStatus, Employee, T2.AirplaneId AS AirplaneId, DueDate, FlightLocationId
						FROM (SELECT WorkDescription, MaintenenceStatus, FirstName +', ' + LastName AS Employee, AirplaneId, DueDate
									FROM (SELECT WorkDescription, MaintenenceStatus, EmployeeId, AirplaneId, DueDate
												FROM pr2.Maintenence INNER JOIN pr2.MaintenenceStatus
													ON Maintenence.MaintenenceStatusId = MaintenenceStatus.Id) T1 INNER JOIN pr2.Employees
										ON T1.EmployeeId = Employees.EmployeeId) T2 INNER JOIN pr2.Airplanes
							ON T2.AirplaneId = Airplanes.AirplaneId) T3 INNER JOIN pr2.FlightsParked
					ON T3.FlightLocationId = FlightsParked.ParkingId) T4 INNER JOIN pr2.Airports
			ON T4.AirportId = Airports.AirportId;


--	3. This view shows a lot of information about the scheduled flight which may be very useful for a customer and sometimes
--			management

CREATE VIEW pr2.FlightSchedules (FlightNumber,[From], [To], DepartureTerminal, DepartureGate,
									 FlightStatus, ScheduledDepartureTime, ScheduledArrivalTime) AS
	SELECT FlightNumber,[From], [To], TerminalName AS DepartureTerminal,
				 DepartureGate, FlightStatus, ScheduledDepartureTime, ScheduledArrivalTime
		FROM(SELECT FlightNumber, GateNumber AS DepartureGate, TerminalId, FlightStatus,
						 ScheduledDepartureTime, ScheduledArrivalTime, [From], [To]
				FROM(SELECT FlightNumber, ScheduledDepartureGate, FlightStatus, ScheduledDepartureTime,
								 ScheduledArrivalTime, [From], [To]
						FROM(SELECT FlightNumber, ScheduledDepartureGate, FlightStatusId, ScheduledDepartureTime,
										 ScheduledArrivalTime, [From], Name AS [To]
								FROM(SELECT FlightNumber, ScheduledDepartureGate, FlightStatusId, ScheduledDepartureTime,
												 ScheduledArrivalTime, Name AS [From], ToAirportId
										FROM(SELECT FlightNumber, ScheduledDepartureGate, FlightStatusId,
													 ScheduledDepartureTime, ScheduledArrivalTime, FromAirportId, ToAirportId
												FROM(SELECT FlightRouteId, FlightNumber, ScheduledDepartureGate,
															 FlightStatusId, ScheduledDepartureTime, ScheduledArrivalTime
														FROM pr2.ScheduleDetails INNER JOIN pr2.FlightTimes
															ON ScheduleDetails.FlightId = FlightTimes.FlightId) T1 INNER JOIN pr2.FlightRoutes 
													ON T1.FlightRouteId = FlightRoutes.FlightRouteId) T2 INNER JOIN pr2.Airports
											ON (T2.FromAirportId = Airports.AirportId) ) T3 INNER JOIN pr2.Airports
									ON T3.ToAirportId = Airports.AirportId) T4 INNER JOIN pr2.FlightStatus
							ON T4.FlightStatusId = FlightStatus.FlightStatusId) T5 INNER JOIN pr2.TerminalGates
					ON T5.ScheduledDepartureGate = TerminalGates.GateId) T6 INNER JOIN pr2.Terminals
			ON T6.TerminalId = Terminals.TerminalId;

--	4.	This view displays all the customers who are flying and thier various transaction details which I thought
--			might be useful for airport authorities to help customers


CREATE VIEW pr2.CustomerTransactions (TransactionId, FlightNumber, [From], [To], CustomerName, TotalPaid,
											 FlyerMilesUsed, TicketStatus) AS
	SELECT TransactionId, FlightNumber, [From], Name AS [To], CustomerName, TotalPaid, FlyerMilesUsed, TicketStatus
		FROM(SELECT TransactionId, FlightNumber, Name AS [From], ToAirportId, CustomerName,
							 TotalPaid, FlyerMilesUsed, TicketStatus
				FROM(SELECT TransactionId, FlightNumber, FromAirportId, ToAirportId, CustomerName,
										 TotalPaid, FlyerMilesUsed, TicketStatus
						FROM(SELECT TransactionId, FlightNumber, FlightRouteId, CustomerName, TotalPaid, 
												FlyerMilesUsed, TicketStatus
								FROM(SELECT TransactionId, FlightId, FirstName + ', ' + LastName AS CustomerName, 
													TotalPaid, FlyerMilesUsed, TicketStatus
										FROM(SELECT TransactionId, FlightId, CustomerId, TotalPaid, FlyerMilesUsed, TicketStatus
												FROM(SELECT TransactionDetails.TransactionId AS TransactionId, FlightId, 
																CustomerId, (TaxPaid + FeesPaid + ActualFlightPrice + ISNULL(CheckInExtraCharges, 0) - ISNULL(DiscountAmount, 0)) AS TotalPaid, 
																ISNULL(FlyerMilesUsed, 0) AS FlyerMilesUsed, TicketStatusId
														FROM pr2.TransactionDetails INNER JOIN pr2.CustomerTransaction
															ON TransactionDetails.TransactionId = CustomerTransaction.TransactionId) T1 INNER JOIN pr2.TicketStatus
													ON T1.TicketStatusId = TicketStatus.Id) T2 INNER JOIN pr2.Customers
											ON T2.CustomerId = Customers.CustomerId) T3 INNER JOIN pr2.ScheduleDetails 
									ON T3.FlightId = ScheduleDetails.FlightId) T4 INNER JOIN pr2.FlightRoutes
							ON T4.FlightRouteId = FlightRoutes.FlightRouteId) T5 INNER JOIN pr2.Airports
					ON T5.FromAirportId = Airports.AirportId) T6 INNER JOIN pr2.Airports
			ON T6.ToAirportId = Airports.AirportId;


-- Functions


--	1.	This function returns the count of seats available to book in a flight, which may be useful while booking the seats

CREATE FUNCTION pr2.AvailableSeats (@flightNumber AS VARCHAR(25))
	RETURNS @seatMatrix TABLE(SeatClass VARCHAR(25), NumberOfSeats INT)
	BEGIN
		DECLARE @flightId INT
		SELECT @flightId = FlightId
			FROM ScheduleDetails
			WHERE FlightNumber = @flightNumber
		INSERT INTO @seatMatrix
		SELECT ClassName, [Count]
			FROM (SELECT ClassId, COUNT(*) AS [Count]
					FROM pr2.ClassAndSeatMap
					WHERE FlightId = @flightId AND TransactionId IS NULL
					GROUP BY ClassId) T1 INNER JOIN pr2.AirplaneClasses
				ON T1.ClassId = AirplaneClasses.ClassId
		RETURN
	END;


--	2.	This function returns the total income a particular route has got in a particular year, which may be helpful
--			to take business decisions like increasing flights in this route or vice-versa

CREATE FUNCTION pr2.AnualRouteIncome(@fromAirportId AS INT, @toAirportId AS INT, @year AS INT)
	RETURNS DECIMAL(15,2) AS
	BEGIN
		DECLARE @routeId INT
		DECLARE @sum DECIMAL(15,2)
		SELECT @routeId = FlightRouteId
			FROM pr2.FlightRoutes
			WHERE (ToAirportId = @toAirportId) AND (FromAirportId = @fromAirportId)
		SELECT @sum = SUM(TaxPaid + FeesPaid + ActualFlightPrice + ISNULL(CheckInExtraCharges,0) - ISNULL(DiscountAmount,0)) 
			FROM(SELECT [Transaction]
					FROM(SELECT TransactionId AS [Transaction]
							FROM(SELECT FlightId
									FROM pr2.ScheduleDetails
									WHERE FlightRouteId = @routeId) T1 INNER JOIN pr2.ClassAndSeatMap
								ON T1.FlightId = ClassAndSeatMap.FlightId
							WHERE TransactionId IS NOT NULL) T2 INNER JOIN pr2.CustomerTransaction
						ON T2.[Transaction] = CustomerTransaction.TransactionId
					WHERE YEAR(BookingDate) = @year) T3 INNER JOIN pr2.TransactionDetails
				ON T3.[Transaction] = TransactionDetails.TransactionId
		RETURN @sum
	END;


--Stored Procedures

--	1.	This procedure cancels a ticket and refunds the full amount/flyer miles to the customer if the cancellation
--			is done before schedule departure time and no refund later, the procedure also releases the seats booked

CREATE PROCEDURE pr2.CancelTicket(@transactionId AS INT) AS
	IF EXISTS(SELECT TransactionId 
					FROM [pr2].[CustomerTransaction]
					WHERE TransactionId = @transactionId)
		BEGIN
			DECLARE @departureTime DATETIME
			SELECT @departureTime = MIN(ScheduledDepartureTime)
				FROM(SELECT FlightId 
						FROM pr2.ClassAndSeatMap 
						WHERE TransactionId = 17) T1 INNER JOIN pr2.FlightTimes
					ON T1.FlightId = FlightTimes.FlightId
		
			UPDATE [pr2].[CustomerTransaction] 
				SET [CancellationDateTime] = GETDATE()
				WHERE TransactionId = @transactionId
		
			IF((DAY(@departureTime) > DAY(GETDATE())) 
					AND (MONTH(@departureTime) > MONTH(GETDATE())) 
					AND (YEAR(@departureTime) > YEAR(GETDATE())))
				BEGIN
					UPDATE pr2.TransactionDetails
						SET DiscountAmount = (TaxPaid + FeesPaid + ActualFlightPrice + ISNULL(CheckInExtraCharges,0) - ISNULL(DiscountAmount,0))
						WHERE TransactionId = @transactionId
					PRINT 'Total Amount Refunded'

					IF EXISTS(SELECT FlyerMilesUsed
								FROM pr2.TransactionDetails
								WHERE TransactionId = 16)
						BEGIN
							DECLARE @flyerMiles DECIMAL(15,2)
							SELECT @flyerMiles = SUM(FlyerMilesUsed)
								FROM pr2.TransactionDetails
								WHERE TransactionId = @transactionId
							DECLARE @customerId INT
							SELECT @customerId = CustomerId
								FROM pr2.CustomerTransaction
								WHERE TransactionId = @transactionId

							UPDATE pr2.TransactionDetails
								SET FlyerMilesUsed = 0
								WHERE TransactionId = @transactionId

							UPDATE pr2.Customers
								SET FrequentFlyerNumber = FrequentFlyerNumber + @flyerMiles
								WHERE CustomerId = @customerId

							PRINT 'Refunded Frequent Flyer Miles'
						END
				END
			ELSE
				BEGIN
					PRINT 'Late cancellation, No amount will be refunded'
				END

			UPDATE pr2.TransactionDetails
				SET DiscountReason = 'Ticket Cancellation'
				WHERE TransactionId = @transactionId

			UPDATE pr2.CustomerTransaction
				SET TicketStatusId = 3
				WHERE TransactionId = @transactionId

			UPDATE pr2.ClassAndSeatMap
				SET TransactionId = NULL
				WHERE TransactionId = @transactionId 

			PRINT 'Cancellation Successful!'

		END

	ELSE
		BEGIN
			PRINT 'Cancellation Failed, No such TransactionId found'
		END;


--	2.	This procedure is used to log data once th flight is parked in an airport, this procedure flags the gate in
--			which its parked and also logs the purpose for which its parked, if the flight has reached its final destination
--			then 'ActualArrivalTime' is also logged as cuurent datetime

CREATE PROCEDURE pr2.ParkFlight(@airportName AS VARCHAR(25), 
									@flightNumber AS VARCHAR(25), 
									@purposeId AS INT, 
									@terminalName AS VARCHAR(10), 
									@gateNumber AS INT) AS
	DECLARE @airportId INT
	SELECT @airportId = AirportId
		FROM pr2.Airports
		WHERE NAME LIKE @airportName
	IF(@airportId IS NULL)
		BEGIN
			PRINT 'Parking failed! No such Airport exists'
			RETURN
		END

	DECLARE @flightId INT
	SELECT @flightId = FlightId
		FROM pr2.ScheduleDetails
		WHERE FlightNumber LIKE @flightNumber
	IF(@flightId IS NULL)
		BEGIN
			PRINT 'Parking failed! No such Flight exists'
			RETURN
		END
	DECLARE @airplaneId INT
	SELECT @airplaneId = AirplaneId
		FROM pr2.ScheduleDetails
		WHERE FlightId = @flightId

	IF( NOT EXISTS(SELECT Id
			FROM pr2.PurposeOfStay
			WHERE Id = @purposeId))
		BEGIN
			PRINT 'Parking Failed! Invalid purpose id'
			RETURN
		END

	DECLARE @gateId INT
	SELECT @gateId = GateId
		FROM(SELECT TerminalId 
				FROM pr2.Terminals
				WHERE (AirportId = @airportId) AND (TerminalName LIKE @terminalName)) T1 INNER JOIN pr2.TerminalGates
			ON T1.TerminalId = TerminalGates.TerminalId
		WHERE GateNumber = @gateNumber
	IF(@gateId IS NULL)
		BEGIN
			PRINT 'Parking Failed! Incorrect gate or terminal input'
		END

	INSERT INTO [pr2].[FlightsParked]
           ([PurposeOfStay] ,[AirportId] ,[TimeOfArrival])
		VALUES
				(@purposeId, @airportId, GETDATE())

	DECLARE @parkingId INT
	SELECT @parkingId = MAX(ParkingId)
		FROM pr2.FlightsParked

	UPDATE pr2.Airplanes
		SET FlightLocationId = @parkingId
		WHERE AirplaneId = @airplaneId

	DECLARE @routeId INT
	SELECT @routeId = FlightRouteId
		FROM pr2.ScheduleDetails
		WHERE FlightId = @flightId

	DECLARE @toAirportId INT
	SELECT @toAirportId = ToAirportId
		FROM pr2.FlightRoutes
		WHERE FlightRouteId = @routeId

	UPDATE pr2.TerminalGates
		SET IsGateFree = 0
		WHERE GateId = @gateId

	IF ( @toAirportId = @airportId )
		BEGIN
			UPDATE pr2.FlightTimes
				SET ActualArrivalTime = GETDATE()
				WHERE FlightId = @flightId
		END;